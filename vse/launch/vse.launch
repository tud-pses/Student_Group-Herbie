<launch>
	<!-- Example finding 3D poses of the objects detected -->
	<!-- $ roslaunch kinect2_bridge kinect2_bridge.launch publish_tf:=true -->

	<!-- Which image resolution: sd, qhd, hd -->
	<arg name="resolution" default="qhd" />
	
	<node name="vse_node" pkg="vse" type="vse_node" output="screen"></node>
	<node name="vse_master_node" pkg="vse" type="vse_master_node" output="screen"></node>
	<node name="vse_stop_node" pkg="vse" type="vse_stop_node"></node>

	<node name="find_object_3d" pkg="find_object_2d" type="find_object_2d">
		<param name="gui" value="false" type="bool"/>
		<param name="settings_path" value="/home/pses/catkin_ws/src/find-object/optimum.ini" type="str"/>
		<param name="subscribe_depth" value="true" type="bool"/>
		<param name="objects_path" value="/home/pses/catkin_ws/src/find-object/bin" type="str"/>
		<param name="object_prefix" value="object" type="str"/>
		
		<remap from="rgb/image_rect_color" to="/image_cut"/>
		<remap from="depth_registered/image_raw" to="/depthimage_cut"/>
		<remap from="depth_registered/camera_info" to="/kinect2/$(arg resolution)/camera_info"/>
	</node>
	
	<!-- Example of tf synchronisation with the objectsStamped message -->
	<node name="tf_example" pkg="find_object_2d" type="tf_example" output="screen">
		<param name="map_frame_id" value="/map" type="string"/>
		<param name="object_prefix" value="object" type="str"/>
	</node>
	<!-- fake some tf frames for the example /map -> /odom -> /base_link -> /kinect2_base_link -->
	<node pkg="tf" type="static_transform_publisher" name="base_to_camera_tf" 
		args="0.1 0.0 0.3 0.0 0.0 0.0 /base_link /kinect2_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="odom_to_base_tf" 
		args="1.0 0.0 0.1 1.5707 0.0 0.0 /odom /base_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="map_to_odom_tf" 
		args="0.0 0.5 0.0 0.7853 0.0 0.0 /map /odom 100" />

	
	<arg name="node_name" default="image_cut_node" />

	
	<arg name="image" default="/kinect2/$(arg resolution)/image_color_rect" doc="The image topic. Should be remapped to the name of the real image topic." />
	<arg name="depthimage" default="/kinect2/$(arg resolution)/image_depth_rect" doc="The image topic. Should be remapped to the name of the real image topic." />
	
	<arg name="use_camera_info" default="/kinect2/$(arg resolution)/camera_info" doc="Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used." />
	<arg name="debug_view" default="false" doc="Specify whether the node displays a window to show edge image" />


	<!-- image_cut.cpp -->
	<node name="$(arg node_name)" pkg="vse" type="image_cut_node" >
		<remap from="image" to="$(arg image)" />
		<remap from="depthimage" to="$(arg depthimage)" />
		<param name="use_camera_info" value="$(arg use_camera_info)" />
		<param name="debug_view" value="$(arg debug_view)" />
	</node>


</launch>
