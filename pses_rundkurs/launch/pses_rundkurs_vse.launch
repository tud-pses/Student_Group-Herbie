<launch>

  <node pkg="pses_ucbridge" type="uc_bridge" name="uc_bridge" >
    	<param name="config_path" value="$(find pses_ucbridge)/config/" />
    	<param name="register_sensor_groups" value="true" />
    	<param name="activate_motor_controller" value="true" />
    	<param name="activate_steering_controller" value="true" />
    	<param name="activate_kinect" value="true" />
    	<param name="activate_us_sensors" value="true" />
    	<param name="activate_daq" value="true" />
    	<param name="reset_on_shutdown" value="true" />
    	<param name="enable_debug_messages" value="false" />
    	<param name="enable_raw_communication" value="false" />
  </node>

 <arg name="base_name"         default="kinect2"/>
  <arg name="sensor"            default=""/>
  <arg name="publish_tf"        default="true"/>
  <arg name="base_name_tf"      default="$(arg base_name)"/>
  <arg name="fps_limit"         default="-1.0"/>
  <arg name="calib_path"        default="$(find kinect2_bridge)/data/"/>
  <arg name="use_png"           default="false"/>
  <arg name="jpeg_quality"      default="90"/>
  <arg name="png_level"         default="1"/>
  <arg name="depth_method"      default="default"/>
  <arg name="depth_device"      default="-1"/>
  <arg name="reg_method"        default="default"/>
  <arg name="reg_device"        default="-1"/>
  <arg name="max_depth"         default="12.0"/>
  <arg name="min_depth"         default="0.1"/>
  <arg name="queue_size"        default="5"/>
  <arg name="bilateral_filter"  default="true"/>
  <arg name="edge_aware_filter" default="true"/>
  <arg name="worker_threads"    default="4"/>
  <arg name="machine"           default="localhost"/>
  <arg name="nodelet_manager"   default="$(arg base_name)"/>
  <arg name="start_manager"     default="true"/>
  <arg name="use_machine"       default="true"/>
  <arg name="respawn"           default="true"/>
  <arg name="use_nodelet"       default="true"/>
  <arg name="output"            default="screen"/>

  <machine name="localhost" address="localhost" if="$(arg use_machine)"/>

  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager"
        if="$(arg start_manager)" machine="$(arg machine)" />

  <!-- Nodelet version of kinect2_bridge -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_bridge" machine="$(arg machine)"
        args="load kinect2_bridge/kinect2_bridge_nodelet $(arg nodelet_manager)"
        respawn="$(arg respawn)" if="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>

  <!-- Node version of kinect2_bridge -->
  <node pkg="kinect2_bridge" type="kinect2_bridge" name="$(arg base_name)_bridge" machine="$(arg machine)"
        respawn="$(arg respawn)"  unless="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>

  <!-- sd point cloud (512 x 424) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_sd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/sd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/sd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/sd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/sd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- qhd point cloud (960 x 540) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_qhd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/qhd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/qhd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/qhd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/qhd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- hd point cloud (1920 x 1080) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_hd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/hd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/hd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/hd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/hd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>









<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
		<remap from="camera_info" to="/kinect2/sd/camera_info"/>
		<remap from="image" to="/kinect2/sd/image_depth"/>
		<remap from="scan" to="/scan"/>
	
</node>


	<!-- Which image resolution: sd, qhd, hd -->
	<arg name="resolution" default="qhd" />
	
	<node name="vse_node" pkg="vse" type="vse_node" output="screen"></node>
	<node name="vse_master_node" pkg="vse" type="vse_master_node"></node>
<node name="vse_stop_node" pkg="vse" type="vse_stop_node" output="screen"></node>

	<node name="find_object_3d" pkg="find_object_2d" type="find_object_2d">
		<param name="gui" value="false" type="bool"/>
		<param name="settings_path" value="/home/pses/catkin_ws/src/find-object/optimum.ini" type="str"/>
		<param name="subscribe_depth" value="true" type="bool"/>
		<param name="objects_path" value="/home/pses/catkin_ws/src/find-object/bin" type="str"/>
		<param name="object_prefix" value="object" type="str"/>
		
		<remap from="rgb/image_rect_color" to="/image_cut"/>
		<remap from="depth_registered/image_raw" to="/depthimage_cut"/>
		<remap from="depth_registered/camera_info" to="/kinect2/$(arg resolution)/camera_info"/>
	</node>
	
	<!-- Example of tf synchronisation with the objectsStamped message -->
	<node name="tf_example" pkg="find_object_2d" type="tf_example" output="screen">
		<param name="map_frame_id" value="/map" type="string"/>
		<param name="object_prefix" value="object" type="str"/>
	</node>
	<!-- fake some tf frames for the example /map -> /odom -> /base_link -> /kinect2_base_link -->
	<node pkg="tf" type="static_transform_publisher" name="base_to_camera_tf" 
		args="0.1 0.0 0.3 0.0 0.0 0.0 /base_link /kinect2_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="odom_to_base_tf" 
		args="1.0 0.0 0.1 1.5707 0.0 0.0 /odom /base_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="map_to_odom_tf" 
		args="0.0 0.5 0.0 0.7853 0.0 0.0 /map /odom 100" />

	
	<arg name="node_name" default="image_cut_node" />
	
	<arg name="image" default="/kinect2/$(arg resolution)/image_color_rect" doc="The image topic. Should be remapped to the name of the real image topic." />
	<arg name="depthimage" default="/kinect2/$(arg resolution)/image_depth_rect" doc="The image topic. Should be remapped to the name of the real image topic." />
	
	<arg name="use_camera_info" default="/kinect2/$(arg resolution)/camera_info" doc="Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used." />
	<arg name="debug_view" default="false" doc="Specify whether the node displays a window to show edge image" />


	<!-- image_cut.cpp -->
	<node name="$(arg node_name)" pkg="vse" type="image_cut_node" >
		<remap from="image" to="$(arg image)" />
		<remap from="depthimage" to="$(arg depthimage)" />
		<param name="use_camera_info" value="$(arg use_camera_info)" />
		<param name="debug_view" value="$(arg debug_view)" />
	</node>







<node pkg="pses_odometry" type="odometry_node" name="odometry_node"></node>


	<node pkg="pses_rundkurs" type="wallfollow_node" name="wallfollow_node" output="screen">
		<param name="p" 				value="600" type="int"/>
		<param name="i" 				value="0" type="double"/>
		<param name="d"			 	value="27000" type="int"/>
		<param name="speed_param" 	value="400" type="int"/>
	</node>
	<node pkg="pses_rundkurs" type="simple_corner_node" name="simple_corner_node" output="screen">
		<param name="steering_angle_long" 			value="120" type="int" />
		<param name="steering_angle_short" 			value="230" type="int"/>
		<param name="steering_angle_2_half_long" 	value="310" type="int"/>
		<param name="steering_angle_2_half_short" value="450" type="int"/>
		<param name="steering_angle_2_threshold" 	value="45" type="int"/>
	</node>
	<node pkg="pses_rundkurs" type="rundkurs_node" name="rundkurs_node" output="screen">
			<param name="vse" value="true" type="bool"/>
			<param name="corner_range" value="3.05" type="double"/>
		</node>
	<node pkg="pses_rundkurs" type="USR_Filter" name="USR_Filter">
		</node>

</launch>
